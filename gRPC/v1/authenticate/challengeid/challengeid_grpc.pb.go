// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: gRPC/v1/authenticate/challengeid/challengeid.proto

package challengeid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChallengeidServiceClient is the client API for ChallengeidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChallengeidServiceClient interface {
	GetChallengeId(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetChallengeIdPayload, error)
}

type challengeidServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChallengeidServiceClient(cc grpc.ClientConnInterface) ChallengeidServiceClient {
	return &challengeidServiceClient{cc}
}

func (c *challengeidServiceClient) GetChallengeId(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetChallengeIdPayload, error) {
	out := new(GetChallengeIdPayload)
	err := c.cc.Invoke(ctx, "/challengeid.challengeidService/GetChallengeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChallengeidServiceServer is the server API for ChallengeidService service.
// All implementations must embed UnimplementedChallengeidServiceServer
// for forward compatibility
type ChallengeidServiceServer interface {
	GetChallengeId(context.Context, *Empty) (*GetChallengeIdPayload, error)
	mustEmbedUnimplementedChallengeidServiceServer()
}

// UnimplementedChallengeidServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChallengeidServiceServer struct {
}

func (UnimplementedChallengeidServiceServer) GetChallengeId(context.Context, *Empty) (*GetChallengeIdPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallengeId not implemented")
}
func (UnimplementedChallengeidServiceServer) mustEmbedUnimplementedChallengeidServiceServer() {}

// UnsafeChallengeidServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChallengeidServiceServer will
// result in compilation errors.
type UnsafeChallengeidServiceServer interface {
	mustEmbedUnimplementedChallengeidServiceServer()
}

func RegisterChallengeidServiceServer(s grpc.ServiceRegistrar, srv ChallengeidServiceServer) {
	s.RegisterService(&ChallengeidService_ServiceDesc, srv)
}

func _ChallengeidService_GetChallengeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeidServiceServer).GetChallengeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/challengeid.challengeidService/GetChallengeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeidServiceServer).GetChallengeId(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ChallengeidService_ServiceDesc is the grpc.ServiceDesc for ChallengeidService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChallengeidService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "challengeid.challengeidService",
	HandlerType: (*ChallengeidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChallengeId",
			Handler:    _ChallengeidService_GetChallengeId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/v1/authenticate/challengeid/challengeid.proto",
}
